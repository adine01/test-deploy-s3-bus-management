openapi: 3.0.3
info:
  title: Choreo Sample - Bus Management - Go REST API Service
  description: >-
    This is a sample API specification for a bus management application with PostgreSQL database
    written in Go
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Choreo
  url: https://choreo.dev
servers:
  - url: http://localhost:8081
tags:
  - name: buses
    description: Bus management API
  - name: staff
    description: Staff management API
  - name: health
    description: Health check API
paths:
  /health:
    summary: Healthcheck endpoint
    get:
      summary: Healthcheck
      operationId: Healthcheck
      tags:
        - health
      responses:
        "200":
          description: Healthy response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"

  /api/buses:
    summary: List all buses
    get:
      summary: List all buses
      operationId: ListAllBuses
      tags:
        - buses
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Bus"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a new bus
      operationId: CreateNewBus
      responses:
        "201":
          description: Bus created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bus"
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - buses
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBusRequest"

  /api/buses/{id}:
    summary: Get bus by ID
    get:
      tags:
        - buses
      summary: Get bus by ID
      operationId: GetBusByID
      parameters:
        - name: id
          in: path
          description: ID of bus to return
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bus"
        "404":
          description: Bus not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - buses
      summary: Delete bus by ID
      description: Deletes a single bus based on the ID supplied
      operationId: DeleteBusByID
      parameters:
        - name: id
          in: path
          description: ID of bus to delete
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "404":
          description: Bus not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - buses
      summary: Update bus by ID
      description: Updates the bus information based on the ID supplied
      operationId: UpdateBusByID
      parameters:
        - name: id
          in: path
          description: ID of bus to update
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bus"
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Bus not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBusRequest"

  /api/staff:
    summary: List all staff
    get:
      summary: List all staff
      operationId: ListAllStaff
      tags:
        - staff
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Staff"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a new staff member
      operationId: CreateNewStaff
      responses:
        "201":
          description: Staff created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Staff"
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - staff
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateStaffRequest"

  /api/staff/{id}:
    summary: Get staff by ID
    get:
      tags:
        - staff
      summary: Get staff by ID
      operationId: GetStaffByID
      parameters:
        - name: id
          in: path
          description: ID of staff to return
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Staff"
        "404":
          description: Staff not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - staff
      summary: Delete staff by ID
      description: Deletes a single staff member based on the ID supplied
      operationId: DeleteStaffByID
      parameters:
        - name: id
          in: path
          description: ID of staff to delete
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "404":
          description: Staff not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - staff
      summary: Update staff by ID
      description: Updates the staff information based on the ID supplied
      operationId: UpdateStaffByID
      parameters:
        - name: id
          in: path
          description: ID of staff to update
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Staff"
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Staff not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateStaffRequest"

components:
  schemas:
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          example: "ok"
        service:
          type: string
          example: "bus-management"

    Bus:
      type: object
      properties:
        id:
          type: integer
          example: 1
        plate_number:
          type: string
          example: "ABC-1234"
        model:
          type: string
          example: "Mercedes Sprinter"
        capacity:
          type: integer
          example: 50
        status:
          type: string
          example: "active"
        created_at:
          type: string
          format: date-time
          example: "2025-09-21T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-09-21T10:30:00Z"

    CreateBusRequest:
      type: object
      required:
        - plate_number
        - model
        - capacity
      properties:
        plate_number:
          type: string
          example: "ABC-1234"
        model:
          type: string
          example: "Mercedes Sprinter"
        capacity:
          type: integer
          example: 50

    Staff:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "john.doe@company.com"
        phone:
          type: string
          example: "+1234567890"
        position:
          type: string
          example: "driver"
        license_no:
          type: string
          example: "DL123456"
        status:
          type: string
          example: "active"
        created_at:
          type: string
          format: date-time
          example: "2025-09-21T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-09-21T10:30:00Z"

    CreateStaffRequest:
      type: object
      required:
        - name
        - email
        - phone
        - position
      properties:
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "john.doe@company.com"
        phone:
          type: string
          example: "+1234567890"
        position:
          type: string
          example: "driver"
        license_no:
          type: string
          example: "DL123456"

    SuccessMessage:
      type: object
      properties:
        message:
          type: string
          example: "Operation completed successfully"

    Error:
      type: object
      properties:
        error:
          type: string
          example: "Invalid request data"
